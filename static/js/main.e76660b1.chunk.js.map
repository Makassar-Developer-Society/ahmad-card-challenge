{"version":3,"sources":["Assets/acca.jpg","Component/Card.jsx","Component/Header.jsx","Pages/Dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","display","marginTop","spacing","details","flexDirection","content","flex","textAlign","img","width","height","alignSelf","MediaControlCard","classes","Card","className","CardMedia","image","require","CardContent","Typography","component","variant","flexGrow","menuButton","marginRight","DenseAppBar","AppBar","position","Toolbar","style","color","ComplexGrid","Grid","container","direction","justify","item","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,yJCQrCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,QAAS,OACTC,UAAWH,EAAMI,QAAQ,IAE7BC,QAAS,CACLH,QAAS,OACTI,cAAe,UAEnBC,QAAS,CACLC,KAAM,WACNC,UAAW,QAEfC,IAAK,CACDC,MAAO,IACPC,OAAQ,IACRC,UAAW,cAIJ,SAASC,IACpB,IAAMC,EAAUjB,IAEhB,OACI,kBAACkB,EAAA,EAAD,CAAMC,UAAWF,EAAQd,MACrB,kBAACiB,EAAA,EAAD,CAAWD,UAAWF,EAAQL,IAC1BS,MAAOC,EAAQ,MAEnB,yBAAKH,UAAWF,EAAQV,SACpB,kBAACgB,EAAA,EAAD,CAAaJ,UAAWF,EAAQR,SAC5B,kBAACe,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,MAAnC,yBAGA,kBAACF,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,MAAnC,4CAGA,kBAACF,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,MAAnC,mBAGA,kBAACF,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,MAAnC,wE,oBCzCd1B,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFwB,SAAU,EACVhB,UAAW,SAEfiB,WAAY,CACRC,YAAa3B,EAAMI,QAAQ,QAIpB,SAASwB,IACpB,IAAMb,EAAUjB,IAEhB,OACI,yBAAKmB,UAAWF,EAAQd,MACpB,kBAAC4B,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,CAASP,QAAQ,QAAQQ,MAAO,CAAEnB,UAAW,WACzC,kBAACS,EAAA,EAAD,CAAYE,QAAQ,KAAKS,MAAM,WAA/B,kBClBL,SAASC,IAEpB,OACI,6BACI,6BACI,kBAAC,EAAD,OAEJ,6BACI,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,MACVC,QAAQ,UAGR,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACP,MAAQ,CAACrB,MAAM,MAC1B,kBAAC,EAAD,U,MCRL6B,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCKcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e76660b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/acca.07a56f84.jpg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    details: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    content: {\r\n        flex: '1 0 auto',\r\n        textAlign: 'left'\r\n    },\r\n    img: {\r\n        width: 500,\r\n        height: 200,\r\n        alignSelf: 'center',\r\n    },\r\n}));\r\n\r\nexport default function MediaControlCard() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardMedia className={classes.img}\r\n                image={require('./../Assets/acca.jpg')}\r\n            />\r\n            <div className={classes.details}>\r\n                <CardContent className={classes.content}>\r\n                    <Typography component=\"h6\" variant=\"h6\">\r\n                        Nama : Ahmad Muyassar\r\n                    </Typography>\r\n                    <Typography component=\"h6\" variant=\"h6\">\r\n                        Status : Single (Masih Memantaskan Diri)\r\n                    </Typography>\r\n                    <Typography component=\"h6\" variant=\"h6\">\r\n                        Umur : 17 Tahun\r\n                    </Typography>\r\n                    <Typography component=\"h6\" variant=\"h6\">\r\n                        Motto : Jangan Lakukan Sekarang kalau masih bisa dikerjakan besok\r\n                    </Typography>\r\n                </CardContent>\r\n\r\n            </div>\r\n\r\n        </Card>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        textAlign: 'right',\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nexport default function DenseAppBar() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar variant=\"dense\" style={{ alignSelf: 'center' }}>\r\n                    <Typography variant=\"h6\" color=\"inherit\">\r\n                        Challenge 1\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '../Component/Card'\r\nimport Header from '../Component/Header'\r\n\r\nexport default function ComplexGrid() {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Header />\r\n            </div>\r\n            <div>\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                // alignItems=\"center\"\r\n                >\r\n                    <Grid item style= {{width:500}}> \r\n                    <Card />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport Dashboard from './Pages/Dashboard'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}